import js from '@eslint/js';
import prettier from 'eslint-config-prettier';
import importXPlugin from 'eslint-plugin-import-x';
import nodePlugin from 'eslint-plugin-n';
import securityPlugin from 'eslint-plugin-security';
import globals from 'globals';

export default [
  js.configs.recommended,
  nodePlugin.configs['flat/recommended'],
  securityPlugin.configs.recommended,
  {
    languageOptions: {
      globals: { ...globals.browser, ...globals.node, ...globals.jquery },
      ecmaVersion: 'latest',
      sourceType: 'module',
    },
    plugins: {
      'import-x': importXPlugin,
    },
    ignores: ['node_modules/**'],
    rules: {
      // Possible Errors
      'no-await-in-loop': 'error',
      'no-console': 'warn',
      'no-constant-condition': 'error',
      'no-debugger': 'error',
      'no-dupe-args': 'error',
      'no-dupe-keys': 'error',
      'no-duplicate-case': 'error',
      'no-empty': ['error', { allowEmptyCatch: true }],
      'no-ex-assign': 'error',
      'no-extra-boolean-cast': 'error',
      'no-invalid-regexp': 'error',
      'no-irregular-whitespace': 'error',
      'no-sparse-arrays': 'error',
      'no-template-curly-in-string': 'error',
      'no-unsafe-optional-chaining': 'error',
      'no-useless-catch': 'error',

      // Best Practices
      'array-callback-return': 'error',
      'block-scoped-var': 'error',
      'consistent-return': 'error',
      complexity: ['error', { max: 10 }],
      'no-else-return': 'error',
      'no-multi-spaces': 'error',
      'no-param-reassign': 'error',
      'no-prototype-builtins': 'error',
      curly: ['error', 'all'],
      'default-case': 'error',
      'dot-notation': 'error',
      eqeqeq: ['error', 'always', { null: 'ignore' }],
      'no-alert': 'warn',
      'no-caller': 'error',
      'no-empty-function': 'error',
      'no-eval': 'error',
      'no-extend-native': 'error',
      'no-extra-bind': 'error',
      'no-floating-decimal': 'error',
      'no-implied-eval': 'error',
      'no-iterator': 'error',
      'no-labels': ['error', { allowLoop: false, allowSwitch: false }],
      'no-lone-blocks': 'error',
      'no-multi-str': 'error',
      'no-new': 'error',
      'no-new-func': 'error',
      'no-new-wrappers': 'error',
      'no-octal': 'error',
      'no-octal-escape': 'error',
      'no-proto': 'error',
      'no-return-assign': ['error', 'always'],
      'no-return-await': 'error',
      'no-script-url': 'error',
      'no-self-compare': 'error',
      'no-sequences': 'error',
      'no-throw-literal': 'error',
      'no-unmodified-loop-condition': 'error',
      'no-unused-expressions': ['error', { allowShortCircuit: true, allowTernary: true }],
      'no-useless-concat': 'error',
      'no-useless-return': 'error',
      'prefer-object-spread': 'error',
      'prefer-promise-reject-errors': 'error',
      'require-await': 'error',
      yoda: ['error', 'never'],

      // Variables
      'no-label-var': 'error',
      'no-shadow': 'error',
      'no-undef-init': 'error',
      'no-unused-vars': ['error', { vars: 'all', args: 'after-used', ignoreRestSiblings: true }],
      'no-use-before-define': ['error', { functions: true, classes: true, variables: true }],
      'no-implicit-coercion': ['error', { boolean: false, number: true, string: true }],

      // Node.js and CommonJS
      'n/no-missing-import': 'error',
      'n/file-extension-in-import': ['error', 'always'],
      'n/no-extraneous-require': 'error',
      'n/no-unsupported-features/es-syntax': ['error', { ignores: ['modules'] }],
      'n/prefer-global/buffer': ['error', 'always'],
      'n/prefer-global/console': ['error', 'always'],
      'n/prefer-global/process': ['error', 'always'],
      'n/prefer-global/url': ['error', 'always'],
      'n/prefer-global/url-search-params': ['error', 'always'],
      'n/prefer-promises/dns': 'error',
      'n/prefer-promises/fs': 'error',
      'n/prefer-node-protocol': 'error',
      'n/no-new-require': 'error',
      'n/no-path-concat': 'error',
      'n/exports-style': ['error', 'module.exports'],
      'n/no-process-exit': 'error',

      // Stylistic Issues
      camelcase: ['error', { properties: 'never' }],
      'comma-dangle': ['error', 'always-multiline'],
      'func-names': 'warn',
      indent: ['error', 2, { SwitchCase: 1 }],
      'key-spacing': ['error', { beforeColon: false, afterColon: true }],
      'linebreak-style': ['error', 'unix'],
      'max-len': ['error', { code: 100, ignoreComments: true, ignoreUrls: true }],
      'new-cap': ['error', { newIsCap: true, capIsNew: false }],
      'no-array-constructor': 'error',
      'no-bitwise': 'error',
      'no-continue': 'error',
      'no-lonely-if': 'error',
      'no-mixed-operators': ['error', { allowSamePrecedence: true }],
      'no-multi-assign': 'error',
      'no-negated-condition': 'error',
      'no-nested-ternary': 'error',
      'no-new-object': 'error',
      'no-trailing-spaces': 'error',
      'no-underscore-dangle': 'error',
      'object-curly-spacing': ['error', 'always'],
      'one-var': ['error', 'never'],
      'operator-linebreak': ['error', 'before'],
      'prefer-const': ['error', { destructuring: 'all' }],
      'quote-props': ['error', 'as-needed'],
      semi: ['error', 'always'],
      'space-before-blocks': 'error',
      'space-before-function-paren': ['error', 'never'],
      'space-in-parens': ['error', 'never'],
      'space-infix-ops': 'error',
      'spaced-comment': ['error', 'always', { exceptions: ['-', '+'] }],
      'import-x/order': [
        'error',
        {
          groups: [['builtin', 'external'], 'internal', ['parent', 'sibling'], 'index'],
          'newlines-between': 'always',
        },
      ],
      'import-x/prefer-default-export': 'error',

      // ECMAScript 6
      'arrow-body-style': ['error', 'as-needed'],
      'arrow-parens': ['error', 'as-needed'],
      'arrow-spacing': ['error', { before: true, after: true }],
      'no-duplicate-imports': 'error',
      'no-useless-computed-key': 'error',
      'no-useless-constructor': 'error',
      'no-var': 'error',
      'object-shorthand': ['error', 'always'],
      'prefer-arrow-callback': ['error', { allowNamedFunctions: false }],
      'prefer-destructuring': [
        'error',
        {
          array: false,
          object: true,
        },
        {
          enforceForRenamedProperties: false,
        },
      ],
      'prefer-numeric-literals': 'error',
      'prefer-rest-params': 'error',
      'prefer-spread': 'error',
      'prefer-template': 'error',
      'rest-spread-spacing': ['error', 'never'],
      'template-curly-spacing': ['error', 'never'],
    },
  },
  prettier,
];
